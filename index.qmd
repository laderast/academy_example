---
title: "Running Batch Jobs on the DNAnexus Platform"
format:
  html:
    toc: true
    toc-depth: 3
---

:::{.callout}
## Question

How do you run batch jobs on the DNAnexus Platform?
:::

## Learning Objectives

After this lesson, you should be able to: 

- **Explain** a basic recipe for batch processing on the DNAnexus Platform
- **Demonstrate** the utility of `dx find data`
- **Demonstrate** `xargs` and use it to process multiple files.
- **Demonstrate** `dx run` and use it to process BAM files with the Swiss Army Knife App

## The Basic Recipe

```{r}
#| echo: false
vembedr::embed_youtube("MBFXgfzYCjw")
```

```{bash}
#| eval: false
#| echo: true
dx find data --brief --name *.bam | \
  xargs -I% sh -c \ 
  'dx run app-swiss-army-knife \
   -iin="%" -icmd="sambamba index \${in_name}"'
```

```{mermaid}
%%| fig-width: 5
%%| fig-cap: The Basic Recipe for Batch Processing
graph LR;
  A[List files </br> using `dx data`] --> F{"|"}
  F --> E[`xargs` sh -c]
  E --> B[`dx run` </br> on file1];
  E --> C[`dx run` </br> on file2];
  E --> D[`dx run` </br> on file3];
```

Let's learn about batch processing on the DNAnexus platform. When we talk about batch processing, we'll process files within a project on the platform. We can cycle through a set of BAM files and filter out variants, for example. 

Today, we'll talk about a straightforward way to process files: using `dx find data` to find a list of data files with our criteria, and then use dx run with an app called `Swiss army knife.`

## `dx find data`

```{r}
#| echo: false
vembedr::embed_youtube("BuIPCTj9gjs")
```

We can use `dx find data` to generate lists of file ids to process using the `--brief` option. If we don't use the `--brief` option, then the output is much like `dx ls`: a directory listing with additional information.

For example, if we run: 

```{bash}
#| eval: false
#| echo: true
dx find data --brief --name "*.bam"
```

It produces the output:

```
project-GJ496B00FZfxPV5VG36FybvY:file-BZ9YGzj0x05b66kqQv51011q
project-GJ496B00FZfxPV5VG36FybvY:file-BZ9YGpj0x05xKxZ42QPqZkJY
project-GJ496B00FZfxPV5VG36FybvY:file-BQbXVY0093Jk1KVY1J082y7v
project-GJ496B00FZfxPV5VG36FybvY:file-FpQKQk00FgkGV3Vb3jJ8xqGV
```
 
:::{.callout}
## Don't Forget the Quotes!

Note that the value for the `--name` option is in quotes. If you try to use `dx find data` without using quotes, it will not return anything.
:::
 
## `xargs`

```{r echo=FALSE}
#| echo: false
vembedr::embed_youtube("KUHY21QCp04")
```

Let's talk about `xargs`. This is a command that will take a list of input, and execute a subshell command for each element in the list.

When we put together `xargs` with `dx find data`, we can list the file ids of each file:

```{bash}
#| eval: false
#| echo: true
dx find data --brief --name "*.bam" | \
  xargs -I% sh -c "echo 'file: %'"
```

This produces the output:

```
file: project-GJ496B00FZfxPV5VG36FybvY:file-BZ9YGzj0x05b66kqQv51011q
file: project-GJ496B00FZfxPV5VG36FybvY:file-BZ9YGpj0x05xKxZ42QPqZkJY
file: project-GJ496B00FZfxPV5VG36FybvY:file-BQbXVY0093Jk1KVY1J082y7v
file: project-GJ496B00FZfxPV5VG36FybvY:file-FpQKQk00FgkGV3Vb3jJ8xqGV
```

:::{.callout}
## `xargs` and quotes

We'll use 
:::


## `dx run`

```{r echo=FALSE}
#| echo: false
vembedr::embed_youtube("wXcr0AOxdlw")
```

Let's first talk about `dx run` and running a special app on the platform called Swiss Army Knife. This is a general purpose app for genomics and bioinformatics work. It contains a lot of the utilities that you are used to, such as PLINK and bcftools. We'll put a link in the description to the documentation.

We can run a single job with Swiss Army Knife using a `dx run` statement.

```{bash}
#| eval: false
#| echo: true
dx run app-swiss-army-knife \
  -iin="/data/NA12878.bam" \
  -icmd="sambamba index \${in_name}"
```

:::{.callout}
## Inputs to an App: `-i`

Note that the inputs to Swiss army knife and other apps on the platform are specified with a single dash (`-iin` or `-icmd`), rather than the double dash you may be used to for other command line options.
:::

When we integrate it into our recipe, we'll switch out our file name (`/data/NA12878.bam`) with our placeholder (`%`). We'll also enclose our statement with double quotes.

The last thing to note is that in our `cmd` input, we escape our `$` for our variable: `\$`. This will evaluate to `$in_name` by our bash shell, which can then be used by Swiss Army Knife.

```{bash}
#| eval: false
#| echo: true
'dx run app-swiss-army-knife \
  -iin="%" \
  -icmd="sambamba index \${in_name}"'
```

:::{.callout}
## Bash Helper Variables

When we specify inputs for an app, there are a number of helper variables we can use. For our one input `-iin="data/NA12878.bam"`, this is what these helper variables contain:

| Bash Variable | Value | Notes |
|---------------|-------|-------|
| `$in`         | `data/NA12878.bam` | Location in project storage |
| `$in_path`    | `~/NA12878.bam` | Location in worker storage |
| `$in_name`    | `NA12878.bam` | File name (without folder path) |
| `$in_prefix`  | `NA12878` | File name without the suffix |

These variables are super helpful when specifying file names. `$_prefix` is especially helpful when we want to name our output with a different extension, but the same prefix (such as `NA12845.bam` and `NA12845.bai`).
:::

## Putting it All Together

```{r}
#| echo: false
vembedr::embed_youtube("vjVS8QLDhAw")
```

Let's put everything together. We can now see what each piece of the recipe does.

```{bash}
#| eval: false
#| echo: true
dx find data --brief --name *.bam | \
  xargs -I% sh -c \ 
  'dx run app-swiss-army-knife \
   -iin="%" -icmd="sambamba index \${in_name}"'
```

## What Your Learned

- A basic recipe for batch processing
- The role of `dx find data`, `xargs` and `dx run` in this recipe
